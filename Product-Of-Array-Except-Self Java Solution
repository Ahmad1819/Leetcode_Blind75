#Leetcode Problem 4 : Product of Array except Self

Solution 1: with prefix-product and suffix-product, extra space
TimeComplexity: O(n)
SpaceComplexity: O(n)

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int pre[]=new int[n];
        int suf[]=new int[n];
        int res[]=new int[n];
        pre[0]=nums[0];
        suf[n-1]=nums[n-1];
        for(int i=1;i<n;i++){
             pre[i]=nums[i]*pre[i-1];
        }
        for(int i=n-2;i>=0;i--){
            suf[i] = nums[i]*suf[i+1];
        } 
        res[0]=suf[1];
        res[n-1]=pre[n-2];
        for(int i=1;i<n-1;i++){
            res[i]=pre[i-1]*suf[i+1];
        }
        return res;
        
    }
}

Solution 2: without prefix product Array and suffix product Array, without extra space
TimeComplexity: O(n)

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int res[]=new int[n];
        int leftProd=1;
        for(int i=0;i<n;i++){
            res[i]=leftProd;
            leftProd *=nums[i];
        }
        int suffProd = 1;
        for(int i=n-1;i>=0;i--){
            res[i] *= suffProd;
            suffProd *= nums[i];
        }
        return res;
        
    }
}

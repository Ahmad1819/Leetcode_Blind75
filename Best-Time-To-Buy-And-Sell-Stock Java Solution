#LeetCode Problem 2: Best-Time-To-Buy-And-Sell-Stock

Solution 1: with Extra Space
TimeComplexity: O(n)
SpaceComplexity: O(n)

class Solution {
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int max_arr[]=new int[n];
        int max=prices[n-1];
        max_arr[n-1]=prices[n-1];
        for(int i=n-2;i>=0;i--){
            if(prices[i]>max){
                max=prices[i];
            }
            max_arr[i]=max;
        }
        int profit=0;
        for(int i=0;i<n;i++){
            int diff=max_arr[i]-prices[i];
            if(diff>profit) profit=diff;
        }
        return profit;
        
    }
}


Solution 2: without extra space
TimeComplexity: O(n)

class Solution {
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int max=prices[n-1];
        int profit = 0;
        int diff;
        for(int i=n-2;i>=0;i--){
            if(prices[i]>max){
                max = prices[i];
            }
            diff = max - prices[i];
            if(diff>profit) profit = diff;
        }
        return profit;
        
    }
}


Solution 3: without extra space
TimeComplexity: O(n)

class Solution {
    public int maxProfit(int[] prices) {
        int minSoFar=prices[0];
        int maxProfit=0;
        for(int i=0;i<prices.length;i++){
            minSoFar = Math.min(minSoFar, prices[i]);
            int profit = prices[i] - minSoFar;
            maxProfit = Math.max(maxProfit, profit);
        }
        return maxProfit;
        
    }
}

#LeetCode Blind 75: Arrays problem no. 10
#LeetCode Problem 11: Container With Most Water

Solution 1: Brute Force
Time Complexity: O(n^2)
Space Complexity: O(1)

class Solution  {
    public int maxArea(int[] height) {
        int n = height.length;
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int area = Math.min(height[i], height[j]) * (j - i);
                max = Math.max(max, area);
            }
        }
        return max;
    }
}

Solution 2: Two-Pointer Approach (Optimal)
Time Complexity: O(n)
Space Complexity: O(1)

class Solution  {
    public int maxArea(int[] height) {
        int left = 0, right = height.length - 1;
        int max = 0;

        while (left < right) {
            int area = Math.min(height[left], height[right]) * (right - left);
            max = Math.max(max, area);

            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }

        return max;
    }
}

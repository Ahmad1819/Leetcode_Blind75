#LeetCode Blind 75: Arrays problem no. 6
✅ LeetCode Problem 152: Maximum-Product-Subarray

Solution 1: Brute Force (Triple Loop)
Time Complexity: O(n³)
Space Complexity: O(1)

class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        int maxProduct = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int product = 1;
                for (int k = i; k <= j; k++) {
                    product *= nums[k];
                }
                maxProduct = Math.max(maxProduct, product);
            }
        }
        return maxProduct;
    }
}

-----------------------------------------------------

Solution 2: Improved Brute Force (Double Loop)
Time Complexity: O(n²)
Space Complexity: O(1)

class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        int maxProduct = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            int product = 1;
            for (int j = i; j < n; j++) {
                product *= nums[j];
                maxProduct = Math.max(maxProduct, product);
            }
        }
        return maxProduct;
    }
}

-----------------------------------------------------

Solution 3: Using Prefix & Suffix Product
Time Complexity: O(n)
Space Complexity: O(1)

class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        int prefix = 1, suffix = 1;
        int max = nums[0];

        for (int i = 0; i < n; i++) {
            prefix = (prefix == 0 ? 1 : prefix) * nums[i];
            suffix = (suffix == 0 ? 1 : suffix) * nums[n - 1 - i];
            max = Math.max(max, Math.max(prefix, suffix));
        }

        return max;
    }
}

-----------------------------------------------------

Solution 4: Dynamic Programming (Track max/min)
Time Complexity: O(n)
Space Complexity: O(1)

class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        int maxSoFar = nums[0];
        int maxEndingHere = nums[0];
        int minEndingHere = nums[0];

        for (int i = 1; i < n; i++) {
            int temp = maxEndingHere;
            maxEndingHere = Math.max(nums[i], Math.max(nums[i] * maxEndingHere, nums[i] * minEndingHere));
            minEndingHere = Math.min(nums[i], Math.min(nums[i] * temp, nums[i] * minEndingHere));
            maxSoFar = Math.max(maxSoFar, maxEndingHere);
        }

        return maxSoFar;
    }
}
